"""This is an automatically generated stub for `data.capnp`."""

from __future__ import annotations

from contextlib import contextmanager
from io import BufferedWriter
from typing import Iterator, Literal, overload

class Vector:
    x: float
    y: float
    z: float
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[VectorReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> VectorReader: ...
    @staticmethod
    def new_message() -> VectorBuilder: ...
    def to_dict(self) -> dict: ...

class VectorReader(Vector):
    def as_builder(self) -> VectorBuilder: ...

class VectorBuilder(Vector):
    @staticmethod
    def from_dict(dictionary: dict) -> VectorBuilder: ...
    def copy(self) -> VectorBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> VectorReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Quaternion:
    w: float
    x: float
    y: float
    z: float
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[QuaternionReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> QuaternionReader: ...
    @staticmethod
    def new_message() -> QuaternionBuilder: ...
    def to_dict(self) -> dict: ...

class QuaternionReader(Quaternion):
    def as_builder(self) -> QuaternionBuilder: ...

class QuaternionBuilder(Quaternion):
    @staticmethod
    def from_dict(dictionary: dict) -> QuaternionBuilder: ...
    def copy(self) -> QuaternionBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> QuaternionReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class RLObjectState:
    position: Vector | VectorBuilder | VectorReader
    speed: Vector | VectorBuilder | VectorReader
    rotation: Vector | VectorBuilder | VectorReader
    angularSpeed: Vector | VectorBuilder | VectorReader
    @overload
    def init(self, name: Literal["position"]) -> Vector: ...
    @overload
    def init(self, name: Literal["speed"]) -> Vector: ...
    @overload
    def init(self, name: Literal["rotation"]) -> Vector: ...
    @overload
    def init(self, name: Literal["angularSpeed"]) -> Vector: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[RLObjectStateReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> RLObjectStateReader: ...
    @staticmethod
    def new_message() -> RLObjectStateBuilder: ...
    def to_dict(self) -> dict: ...

class RLObjectStateReader(RLObjectState):
    position: VectorReader
    speed: VectorReader
    rotation: VectorReader
    angularSpeed: VectorReader
    def as_builder(self) -> RLObjectStateBuilder: ...

class RLObjectStateBuilder(RLObjectState):
    position: Vector | VectorBuilder | VectorReader
    speed: Vector | VectorBuilder | VectorReader
    rotation: Vector | VectorBuilder | VectorReader
    angularSpeed: Vector | VectorBuilder | VectorReader
    @staticmethod
    def from_dict(dictionary: dict) -> RLObjectStateBuilder: ...
    def copy(self) -> RLObjectStateBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> RLObjectStateReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class GameState:
    car: RLObjectState | RLObjectStateBuilder | RLObjectStateReader
    ball: RLObjectState | RLObjectStateBuilder | RLObjectStateReader
    boostAmount: int
    dead: bool
    @overload
    def init(self, name: Literal["car"]) -> RLObjectState: ...
    @overload
    def init(self, name: Literal["ball"]) -> RLObjectState: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[GameStateReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> GameStateReader: ...
    @staticmethod
    def new_message() -> GameStateBuilder: ...
    def to_dict(self) -> dict: ...

class GameStateReader(GameState):
    car: RLObjectStateReader
    ball: RLObjectStateReader
    def as_builder(self) -> GameStateBuilder: ...

class GameStateBuilder(GameState):
    car: RLObjectState | RLObjectStateBuilder | RLObjectStateReader
    ball: RLObjectState | RLObjectStateBuilder | RLObjectStateReader
    @staticmethod
    def from_dict(dictionary: dict) -> GameStateBuilder: ...
    def copy(self) -> GameStateBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> GameStateReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Controls:
    throttle: float
    steer: float
    pitch: float
    yaw: float
    roll: float
    boost: bool
    jump: bool
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[ControlsReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> ControlsReader: ...
    @staticmethod
    def new_message() -> ControlsBuilder: ...
    def to_dict(self) -> dict: ...

class ControlsReader(Controls):
    def as_builder(self) -> ControlsBuilder: ...

class ControlsBuilder(Controls):
    @staticmethod
    def from_dict(dictionary: dict) -> ControlsBuilder: ...
    def copy(self) -> ControlsBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> ControlsReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...
